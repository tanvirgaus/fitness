var rootUrl = "http://www.gomitto.com.au/";var serviceURL = '';var redirectUrl = '';/** * Setting var value as per Dev enviornment */var loc = window.location.toString();if (loc.search(/localhost/) != -1) {	rootUrl = "http://gomitto.localhost/";}if (loc.search(/smart-catalog/) != -1) {	rootUrl = "http://dev.smart-catalog.com.au/infinity/gomitto/";}if (loc.search(/staging/) != -1) {    rootUrl = "http://gomitto.staging.infinitytechnologies.com.au/Implementation/";}serviceURL = rootUrl + "member/services/";redirectUrl = rootUrl + "member/";/* Delete Login state - Logout */function logout() {}/* Global submit with JSONP */function submitForm(formObj) {	callback = $('input[name="callback"]', formObj).val();	controller = $('input[name="controller"]', formObj).val();	action = $('input[name="action"]', formObj).val();	$.ajax({		beforeSend : function() {/*show spinner*/		},		complete : function() {/*hide spinner*/		},		url : serviceURL + controller + '/' + action,		crossDomain : true,		cache : true,		data : $(formObj).serialize(),		dataType : "jsonp",		jsonp : false,		jsonpCallbackString : 'callback',		jsonpCallback : callback,		timeout : 60000,		error : function() {			alert('error');		}	});	return false;}/* Global AJAX Request with JSONP */function getAjaxData(url, params, callback) {	$.ajax({		beforeSend : function() {/*show spinner*/		},		complete : function() {/*hide spinner*/		},		url : url,		crossDomain : true,		cache : true,		data : $.param(params),		dataType : "jsonp",		jsonp : false,		jsonpCallbackString : 'callback',		jsonpCallback : callback,		timeout : 60000,		error : function() {		}	});	return false;}function showMessage(data, result) {	setErrorMessages(data);	if (!empty(data.message)) {		$('#' + result).show();		if (data.success == true) {			$('#' + result).html(data.message);			$('#' + result).removeClass('err');			$('#' + result).addClass('success');		} else {			$('#' + result).html(data.message);			$('#' + result).removeClass('success');			$('#' + result).addClass('err');		}	}}function hideMessage(result) {	$('#' + result).hide();}function empty(mixed_var) {	var undef, key, i, len;	var emptyValues = [undef, null, false, 0, "", "0"];	for ( i = 0, len = emptyValues.length; i < len; i++) {		if (mixed_var === emptyValues[i]) {			return true;		}	}	if ( typeof mixed_var === "object") {		for (key in mixed_var) {			return false;		}		return true;	}	return false;}function dump(arr, level) {	var dumped_text = "";	if (!level)		level = 0;	var level_padding = "";	for (var j = 0; j < level + 1; j++)		level_padding += "    ";	if ( typeof (arr) == 'object') {		for (var item in arr) {			var value = arr[item];			if ( typeof (value) == 'object') {				dumped_text += level_padding + "'" + item + "' ...\n";				dumped_text += dump(value, level + 1);			} else {				dumped_text += level_padding + "'" + item + "' => \"" + value + "\"\n";			}		}	} else {		dumped_text = "===>" + arr + "<===(" + typeof (arr) + ")";	}	return dumped_text;}function replaceString(value, replaceTo, replaceWith) {	if (!empty(value)) {		return value.replace(new RegExp(replaceTo, "g"), replaceWith);	}}function round(number, decimals) {	return parseFloat(Math.round(number * 100) / 100).toFixed(decimals);}function setErrorMessages(data) {	$(".invalid-data").remove();	$(".invalid").removeClass('invalid');	if (!empty(data.FieldError)) {		$.each(data.FieldError, function() {			if (this.control.length > 0) {				$("[name='" + this.control + "']").addClass('invalid');				$("[name='" + this.control + "']").after('<div  class="invalid-data">' + this.error + '</div>');			}		});	}}/*version 1.1*/function jStrToArray(data) {	return JSON.parse('[' + data + ']');}